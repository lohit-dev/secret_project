import { createRequire } from 'module';import path from 'path';import {fileURLToPath} from 'url';const __filename = fileURLToPath(import.meta.url);const __dirname = path.dirname(__filename);const require = createRequire(import.meta.url);
var T=t=>(t??[]).map(({name:s,documentation:c})=>({name:s,documentation:c??""})),M=t=>t!==void 0&&t!==""?`: ${t}`:"",S=t=>t.map(({name:s,documentation:c})=>`* \`${s}\`${M(c)}`),L=({entry:t,headingLevel:s,emoji:c})=>{let{name:f,url:u,documentation:o,methods:l,properties:y,constructors:d}=t,r=[`${s}${h({emoji:c,key:"classes"})} ${f}
`];o!==void 0&&o!==""&&r.push(`${o}
`),u!==void 0&&r.push(j({emoji:c,url:u}));let p=(d??[]).filter(({visibility:i})=>i==="public");return p!=null&&p.length&&(r.push(`${s}# Constructors
`),r.push(...p.map(({parameters:i,documentation:e,visibility:n})=>{let a=[`\`${n}\`${M(e)}
`];return i!=null&&i.length&&(a.push(`Parameters:
`),a.push(...S(T(i)))),a.join(`
`)})),r.push(`
`)),((l==null?void 0:l.length)??0)>0&&(r.push(`${s}# Methods
`),r.push(`${m({entries:l??[],emoji:c})}
`),r.push(`${g({entries:l??[],headingLevel:`${s}#`,docType:"Method",emoji:c})}`)),((y==null?void 0:y.length)??0)>0&&(r.push(`${s}# Properties
`),r.push(`${m({entries:y??[],emoji:c})}
`),r.push(`${g({entries:y??[],headingLevel:`${s}#`,docType:"Property",emoji:c})}`)),r.join(`
`)},P=({entry:t,headingLevel:s,emoji:c})=>{let{name:f,documentation:u}=t,o=[`${s}# ${c==null?"":":gear: "}${f}
`];return u!==void 0&&o.push(`${u}
`),o.push("| Property | Type | Description |"),o.push("| ---------- | ---------- | ---------- |"),(t.properties??[]).forEach(({name:l,type:y,documentation:d,jsDocs:r})=>{let p=(r??[]).map(({name:i,text:e})=>`${i}${e!==void 0?`: ${e.map(({text:n})=>n).join("")}`:""}`);o.push(`| \`${l}\` | \`${k(y??"")}\` | ${d!==void 0&&d!==""?`${k(d).replace(/\r?\n|\r/g,"")}`:""}${p.length>0?` ${k(p.join(""))}`:""} |`)}),o.push(`
`),o.join(`
`)},j=({url:t,emoji:s})=>`[${h({emoji:s,key:"link"}).trim()}${s!=null?" ":""}Source](${t})
`,k=t=>t.split(`
`).map(s=>s.trim()).join(" ").replace(/ \| /g," or ").replace(/ & /g," and "),g=({entries:t,headingLevel:s,docType:c,emoji:f})=>{let u=d=>{let i=d.filter(({name:n})=>n==="param").map(({text:n})=>n).reduce((n,a)=>a===void 0?n:[...n,a],[]),e=n=>{var D,E;if(n.find(({kind:$,text:x})=>$==="parameterName"&&x!=="")===void 0)return;let a=((D=n.find(({kind:$})=>$==="parameterName"))==null?void 0:D.text)??"",O=((E=n.find(({kind:$})=>$==="text"))==null?void 0:E.text)??"";return{name:a,documentation:O}};return i.map(e).filter(n=>n!==void 0)},o=d=>d.filter(({name:i})=>i==="example").map(({text:i})=>i).filter(Boolean).flat(1).map(({text:i})=>i).filter(Boolean),l=t.map(({name:d,type:r,documentation:p,parameters:i,jsDocs:e,url:n})=>({name:d,type:r??"",documentation:p??"",params:[...T(i),...u(e??[])],examples:[...o(e??[])],url:n})),y=({name:d,documentation:r,type:p,params:i,examples:e,url:n})=>{let a=[`${s}# ${f==null?"":":gear: "}${d}
`];return r.length&&a.push(`${r}
`),a.push(`| ${p==="Type"?"Type alias":c} | Type |`),a.push("| ---------- | ---------- |"),a.push(`| \`${d}\` | ${p!==void 0&&p!==""?`\`${k(p)}\``:""} |
`),i.length&&(a.push(`Parameters:
`),a.push(...S(i)),a.push(`
`)),e.length&&(a.push(`Examples:
`),a.push(...e),a.push(`
`)),n!==void 0&&a.push(j({emoji:f,url:n})),a.join(`
`)};return l.map(y).join(`
`)},m=({entries:t,emoji:s})=>t.map(({name:c})=>`- [${c}](#${s==null?"":`${s.entry}-`}${c.toLowerCase().replace(/ /g,"-")})`).join(`
`),h=({emoji:t,key:s})=>t==null?"":` :${t[s]}:`,w={classes:"factory",functions:"toolbox",constants:"wrench",enum:"nut_and_bolt",entry:"gear",link:"link",interfaces:"tropical_drink",types:"cocktail"},b=({entries:t,options:s})=>{let{headingLevel:c,emoji:f}=s??{headingLevel:"##",emoji:w},u=c??"##",o=f===null?void 0:f??w,l=t.filter(({doc_type:n})=>n==="function"),y=t.filter(({doc_type:n})=>n==="class"),d=t.filter(({doc_type:n})=>n==="const"),r=t.filter(({doc_type:n})=>n==="enum"),p=t.filter(({doc_type:n})=>n==="type"),i=t.filter(({doc_type:n})=>n==="interface"),e=[];return l.length&&(e.push(`${u}${h({emoji:o,key:"functions"})} Functions
`),e.push(`${m({entries:l,emoji:o})}
`),e.push(`${g({entries:l,headingLevel:u,emoji:o,docType:"Function"})}
`)),d.length&&(e.push(`${u}${h({emoji:o,key:"constants"})} Constants
`),e.push(`${m({entries:d,emoji:o})}
`),e.push(`${g({entries:d,headingLevel:u,emoji:o,docType:"Constant"})}
`)),e.push(y.map(n=>L({entry:n,headingLevel:u,emoji:o})).join(`
`)),r.length&&(e.push(`${u}${h({emoji:o,key:"enum"})} Enum
`),e.push(`${m({entries:r,emoji:o})}
`),e.push(r.map(n=>P({entry:n,headingLevel:u,emoji:o})).join(`
`))),i.length&&(e.push(`${u}${h({emoji:o,key:"interfaces"})} Interfaces
`),e.push(`${m({entries:i,emoji:o})}
`),e.push(i.map(n=>P({entry:n,headingLevel:u,emoji:o})).join(`
`))),p.length&&(e.push(`${u}${h({emoji:o,key:"types"})} Types
`),e.push(`${m({entries:p,emoji:o})}
`),e.push(`${g({entries:p,headingLevel:u,emoji:o,docType:"Type"})}
`)),e.join(`
`)};export{b as a};
//# sourceMappingURL=chunk-JS5RCEQD.mjs.map
