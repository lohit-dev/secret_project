{
  "version": 3,
  "sources": ["../../src/lib/markdown.ts"],
  "sourcesContent": ["import type {JSDocTagInfo, SymbolDisplayPart} from 'typescript';\nimport type {\n  DocEntry,\n  DocEntryConstructor,\n  MarkdownEmoji,\n  MarkdownHeadingLevel,\n  MarkdownOptions\n} from './types';\n\ntype Params = {name: string; documentation: string};\n\ntype Row = Required<Pick<DocEntry, 'name' | 'type' | 'documentation'>> &\n  Pick<DocEntry, 'url'> & {\n    params: Params[];\n    examples: string[];\n  };\n\nconst toParams = (parameters?: DocEntry[]): Params[] =>\n  (parameters ?? []).map(({name, documentation}: DocEntry) => ({\n    name,\n    documentation: documentation ?? ''\n  }));\n\nconst inlineDocParam = (documentation: string | undefined): string =>\n  documentation !== undefined && documentation !== '' ? `: ${documentation}` : '';\n\nconst inlineParams = (params: Params[]): string[] =>\n  params.map(({name, documentation}) => `* \\`${name}\\`${inlineDocParam(documentation)}`);\n\nconst classesToMarkdown = ({\n  entry,\n  headingLevel,\n  emoji\n}: {\n  entry: DocEntry;\n} & Required<Pick<MarkdownOptions, 'headingLevel'>> &\n  Omit<MarkdownOptions, 'headingLevel'>): string => {\n  const {name, url, documentation, methods, properties, constructors} = entry;\n\n  const markdown: string[] = [`${headingLevel}${emojiTitle({emoji, key: 'classes'})} ${name}\\n`];\n\n  if (documentation !== undefined && documentation !== '') {\n    markdown.push(`${documentation}\\n`);\n  }\n\n  if (url !== undefined) {\n    markdown.push(sourceCodeLink({emoji, url}));\n  }\n\n  const publicConstructors: DocEntryConstructor[] = (constructors ?? []).filter(\n    ({visibility}) => visibility === 'public'\n  );\n\n  if (publicConstructors?.length) {\n    markdown.push(`${headingLevel}# Constructors\\n`);\n\n    markdown.push(\n      ...publicConstructors.map(({parameters, documentation, visibility}) => {\n        const docs: string[] = [`\\`${visibility}\\`${inlineDocParam(documentation)}\\n`];\n\n        if (parameters?.length) {\n          docs.push(`Parameters:\\n`);\n          docs.push(...inlineParams(toParams(parameters)));\n        }\n\n        return docs.join('\\n');\n      })\n    );\n\n    markdown.push('\\n');\n  }\n\n  if ((methods?.length ?? 0) > 0) {\n    markdown.push(`${headingLevel}# Methods\\n`);\n    markdown.push(`${tableOfContent({entries: methods ?? [], emoji})}\\n`);\n\n    // Explicitly do not pass repo to generate the source code link afterwards for the all block\n    markdown.push(\n      `${toMarkdown({\n        entries: methods ?? [],\n        headingLevel: `${headingLevel}#`,\n        docType: 'Method',\n        emoji\n      })}`\n    );\n  }\n\n  if ((properties?.length ?? 0) > 0) {\n    markdown.push(`${headingLevel}# Properties\\n`);\n    markdown.push(`${tableOfContent({entries: properties ?? [], emoji})}\\n`);\n\n    // Explicitly do not pass repo to generate the source code link afterwards for the all block\n    markdown.push(\n      `${toMarkdown({\n        entries: properties ?? [],\n        headingLevel: `${headingLevel}#`,\n        docType: 'Property',\n        emoji\n      })}`\n    );\n  }\n\n  return markdown.join('\\n');\n};\n\nconst interfacesToMarkdown = ({\n  entry,\n  headingLevel,\n  emoji\n}: {\n  entry: DocEntry;\n} & Required<Pick<MarkdownOptions, 'headingLevel'>> &\n  Omit<MarkdownOptions, 'headingLevel'> &\n  Pick<MarkdownOptions, 'emoji'>): string => {\n  const {name, documentation} = entry;\n\n  const markdown: string[] = [\n    `${headingLevel}# ${emoji === undefined || emoji === null ? '' : ':gear: '}${name}\\n`\n  ];\n\n  if (documentation !== undefined) {\n    markdown.push(`${documentation}\\n`);\n  }\n\n  markdown.push(`| Property | Type | Description |`);\n  markdown.push('| ---------- | ---------- | ---------- |');\n\n  (entry.properties ?? []).forEach(({name, type, documentation, jsDocs}) => {\n    const jsDocsDescription = (jsDocs ?? []).map(\n      ({name, text}: JSDocTagInfo) =>\n        `${name}${text !== undefined ? `: ${text.map(({text}) => text).join('')}` : ''}`\n    );\n\n    markdown.push(\n      `| \\`${name}\\` | \\`${parseType(type ?? '')}\\` | ${documentation !== undefined && documentation !== '' ? `${parseType(documentation).replace(/\\r?\\n|\\r/g, '')}` : ''}${jsDocsDescription.length > 0 ? ` ${parseType(jsDocsDescription.join(''))}` : ''} |`\n    );\n  });\n\n  markdown.push('\\n');\n\n  return markdown.join('\\n');\n};\n\nconst sourceCodeLink = ({\n  url,\n  emoji\n}: Pick<MarkdownOptions, 'emoji'> & Required<Pick<DocEntry, 'url'>>): string =>\n  `[${emojiTitle({emoji, key: 'link'}).trim()}${emoji !== null && emoji !== undefined ? ' ' : ''}Source](${url})\\n`;\n\n// Avoid issue if the Markdown table gets formatted with Prettier\nconst parseType = (type: string): string =>\n  type\n    .split('\\n')\n    .map((line) => line.trim())\n    .join(' ')\n    .replace(/ \\| /g, ' or ')\n    .replace(/ & /g, ' and ');\n\nconst toMarkdown = ({\n  entries,\n  headingLevel,\n  docType,\n  emoji\n}: {\n  entries: DocEntry[];\n  headingLevel: MarkdownHeadingLevel | '####';\n  docType: 'Constant' | 'Function' | 'Method' | 'Property' | 'Type' | 'Enum';\n} & Pick<MarkdownOptions, 'emoji'>): string => {\n  const jsDocsToParams = (jsDocs: JSDocTagInfo[]): Params[] => {\n    const params: JSDocTagInfo[] = jsDocs.filter(({name}: JSDocTagInfo) => name === 'param');\n    const texts: (SymbolDisplayPart[] | undefined)[] = params.map(({text}) => text);\n\n    const parts: SymbolDisplayPart[][] = texts.reduce(\n      (acc: SymbolDisplayPart[][], values: SymbolDisplayPart[] | undefined) => {\n        if (values === undefined) {\n          return acc;\n        }\n\n        return [...acc, values];\n      },\n      []\n    );\n\n    const toParam = (parts: SymbolDisplayPart[]): Params | undefined => {\n      if (parts.find(({kind, text}) => kind === 'parameterName' && text !== '') === undefined) {\n        return undefined;\n      }\n\n      const name = parts.find(({kind}) => kind === 'parameterName')?.text ?? '';\n      const documentation = parts.find(({kind}) => kind === 'text')?.text ?? '';\n\n      return {name, documentation};\n    };\n\n    return parts.map(toParam).filter((param) => param !== undefined) as Params[];\n  };\n  const jsDocsToExamples = (jsDocs: JSDocTagInfo[]): string[] => {\n    const examples: JSDocTagInfo[] = jsDocs.filter(({name}: JSDocTagInfo) => name === 'example');\n    const texts = examples\n      .map(({text}) => text)\n      .filter(Boolean)\n      .flat(1) as SymbolDisplayPart[];\n    return texts.map(({text}) => text).filter(Boolean);\n  };\n\n  const rows: Row[] = entries.map(\n    ({name, type, documentation, parameters, jsDocs, url}: DocEntry) => ({\n      name,\n      type: type ?? '',\n      documentation: documentation ?? '',\n      params: [...toParams(parameters), ...jsDocsToParams(jsDocs ?? [])],\n      examples: [...jsDocsToExamples(jsDocs ?? [])],\n      url\n    })\n  );\n\n  const rowToMarkdown = ({name, documentation, type, params, examples, url}: Row): string => {\n    const markdown: string[] = [\n      `${headingLevel}# ${emoji === undefined || emoji === null ? '' : ':gear: '}${name}\\n`\n    ];\n\n    if (documentation.length) {\n      markdown.push(`${documentation}\\n`);\n    }\n\n    markdown.push(`| ${type === 'Type' ? 'Type alias' : docType} | Type |`);\n    markdown.push('| ---------- | ---------- |');\n    markdown.push(\n      `| \\`${name}\\` | ${type !== undefined && type !== '' ? `\\`${parseType(type)}\\`` : ''} |\\n`\n    );\n\n    if (params.length) {\n      markdown.push('Parameters:\\n');\n      markdown.push(...inlineParams(params));\n      markdown.push('\\n');\n    }\n    if (examples.length) {\n      markdown.push('Examples:\\n');\n      markdown.push(...examples);\n      markdown.push('\\n');\n    }\n    if (url !== undefined) {\n      markdown.push(sourceCodeLink({emoji, url}));\n    }\n\n    return markdown.join('\\n');\n  };\n\n  return rows.map(rowToMarkdown).join('\\n');\n};\n\nconst tableOfContent = ({\n  entries,\n  emoji\n}: {\n  entries: DocEntry[];\n} & Pick<MarkdownOptions, 'emoji'>): string =>\n  entries\n    .map(\n      ({name}) =>\n        `- [${name}](#${emoji === undefined || emoji === null ? '' : `${emoji.entry}-`}${name\n          .toLowerCase()\n          .replace(/ /g, '-')})`\n    )\n    .join('\\n');\n\nconst emojiTitle = ({\n  emoji,\n  key\n}: {\n  key: keyof MarkdownEmoji;\n} & Pick<MarkdownOptions, 'emoji'>): string =>\n  emoji === undefined || emoji === null ? '' : ` :${emoji[key]}:`;\n\nconst DEFAULT_EMOJI: MarkdownEmoji = {\n  classes: 'factory',\n  functions: 'toolbox',\n  constants: 'wrench',\n  enum: 'nut_and_bolt',\n  entry: 'gear',\n  link: 'link',\n  interfaces: 'tropical_drink',\n  types: 'cocktail'\n};\n\n/**\n * Convert the documentation entries to an opinionated Markdown format.\n *\n * @param {entries: DocEntry[]; options: MarkdownOptions;} params\n * @param params.entries The entries of the documentation (functions, constants and classes).\n * @param params.options Optional configuration to render the Markdown content. See `types.ts` for details.\n */\nexport const documentationToMarkdown = ({\n  entries,\n  options\n}: {\n  entries: DocEntry[];\n  options?: MarkdownOptions;\n}): string => {\n  const {headingLevel: userHeadingLevel, emoji: userEmoji} = options ?? {\n    headingLevel: '##',\n    emoji: DEFAULT_EMOJI\n  };\n\n  const headingLevel = userHeadingLevel ?? '##';\n\n  const emoji: MarkdownEmoji | undefined =\n    userEmoji === null ? undefined : (userEmoji ?? DEFAULT_EMOJI);\n\n  const functions: DocEntry[] = entries.filter(({doc_type}: DocEntry) => doc_type === 'function');\n  const classes: DocEntry[] = entries.filter(({doc_type}: DocEntry) => doc_type === 'class');\n  const constants: DocEntry[] = entries.filter(({doc_type}: DocEntry) => doc_type === 'const');\n  const enums: DocEntry[] = entries.filter(({doc_type}: DocEntry) => doc_type === 'enum');\n  const types: DocEntry[] = entries.filter(({doc_type}: DocEntry) => doc_type === 'type');\n  const interfaces: DocEntry[] = entries.filter(({doc_type}: DocEntry) => doc_type === 'interface');\n\n  const markdown: string[] = [];\n\n  if (functions.length) {\n    markdown.push(`${headingLevel}${emojiTitle({emoji, key: 'functions'})} Functions\\n`);\n    markdown.push(`${tableOfContent({entries: functions, emoji})}\\n`);\n    markdown.push(\n      `${toMarkdown({entries: functions, headingLevel, emoji, docType: 'Function'})}\\n`\n    );\n  }\n\n  if (constants.length) {\n    markdown.push(`${headingLevel}${emojiTitle({emoji, key: 'constants'})} Constants\\n`);\n    markdown.push(`${tableOfContent({entries: constants, emoji})}\\n`);\n    markdown.push(\n      `${toMarkdown({entries: constants, headingLevel, emoji, docType: 'Constant'})}\\n`\n    );\n  }\n  markdown.push(\n    classes.map((entry: DocEntry) => classesToMarkdown({entry, headingLevel, emoji})).join('\\n')\n  );\n  if (enums.length) {\n    markdown.push(`${headingLevel}${emojiTitle({emoji, key: 'enum'})} Enum\\n`);\n    markdown.push(`${tableOfContent({entries: enums, emoji})}\\n`);\n    markdown.push(\n      enums.map((entry: DocEntry) => interfacesToMarkdown({entry, headingLevel, emoji})).join('\\n')\n    );\n  }\n  if (interfaces.length) {\n    markdown.push(`${headingLevel}${emojiTitle({emoji, key: 'interfaces'})} Interfaces\\n`);\n    markdown.push(`${tableOfContent({entries: interfaces, emoji})}\\n`);\n    markdown.push(\n      interfaces\n        .map((entry: DocEntry) => interfacesToMarkdown({entry, headingLevel, emoji}))\n        .join('\\n')\n    );\n  }\n\n  if (types.length) {\n    markdown.push(`${headingLevel}${emojiTitle({emoji, key: 'types'})} Types\\n`);\n    markdown.push(`${tableOfContent({entries: types, emoji})}\\n`);\n    markdown.push(`${toMarkdown({entries: types, headingLevel, emoji, docType: 'Type'})}\\n`);\n  }\n\n  return markdown.join('\\n');\n};\n"],
  "mappings": "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",
  "names": ["toParams", "parameters", "name", "documentation", "inlineDocParam", "inlineParams", "params", "classesToMarkdown", "entry", "headingLevel", "emoji", "url", "methods", "properties", "constructors", "markdown", "emojiTitle", "sourceCodeLink", "publicConstructors", "visibility", "docs", "tableOfContent", "toMarkdown", "interfacesToMarkdown", "type", "jsDocs", "jsDocsDescription", "text", "parseType", "line", "entries", "docType", "jsDocsToParams", "parts", "acc", "values", "toParam", "_a", "_b", "kind", "param", "jsDocsToExamples", "rows", "rowToMarkdown", "examples", "key", "DEFAULT_EMOJI", "documentationToMarkdown", "options", "userHeadingLevel", "userEmoji", "functions", "doc_type", "classes", "constants", "enums", "types", "interfaces"]
}
